#if defined(VSCP_ENABLE_BOOTLOADER)			
			
			//**************************************************************************
			//                        B O O T L O A D  M O D E
			//**************************************************************************
			
 					
			// Handle Enter Boot Loader Mode
			else if ( VSCP_TYPE_PROTOCOL_ENTER_BOOT_LOADER == pEvent->vscp_type ) {
				
				// Must be addressed to us
				for ( i=0; i<16; i++ ) {
					if ( vscp_getGUID( i ) != pEvent->data[ i ] ) return;
				}
				
				// Bootloader algorithm must be VSCP 
				if ( 0 != pEvent->data[ 16 ] ) {
 	
					wrkEvent.head = VSCP_PRIORITY_HIGH;
					wrkEvent.sizeData = 1;
					wrkEvent.vscp_class = VSCP_CLASS1_PROTOCOL;
					wrkEvent.vscp_type = VSCP_TYPE_PROTOCOL_NACK_BOOT_LOADER;
					wrkEvent.data[ 0 ] = 1; // Not supported algorithm
					vscp_sendEvent( &wrkEvent );
					return;
				}
					
				// Enter bootloader mode
				bBootLoadMode = TRUE;
				
				// Erase the internal EEPROM and bootload part
				// of the external EEPROM
				XEEBeginRead( EEPROM_CONTROL, i );
				for ( i=1024; i<=0xffff; i++) {
					XEEWrite( 0xff );
				}
				
 				wrkEvent.head = VSCP_PRIORITY_HIGH;
				wrkEvent.sizeData = 24;
				wrkEvent.vscp_class = VSCP_CLASS1_PROTOCOL;
				wrkEvent.vscp_type = VSCP_TYPE_PROTOCOL_ACK_BOOT_LOADER;
				// GUID is filled in by the send routine automatically	
				
				// We have 64K flash on this chip but the first
				// two are used for the bootloader code so
				// we have 62K for program. This has been 
				// organized as 248 block of 256 bytes each.
				// Not that this has nothing to do with the actual 
				// flash pages of the chip which in this case are
				// handled by the low level bootloader code. 	
				
				wrkEvent.data[ 16 ] =  0;
				wrkEvent.data[ 17 ] =  0;
				wrkEvent.data[ 18 ] =  0;
				wrkEvent.data[ 19 ] =  0xff;	// 256 byte blocks
				wrkEvent.data[ 20 ] =  0;
				wrkEvent.data[ 21 ] =  0;
				wrkEvent.data[ 22 ] =  0;
				wrkEvent.data[ 23 ] =  0xf8;
					
				vscp_sendEvent( &wrkEvent );
				return;
				
			}
						
	
			// Bootloader: Start bootloader BLOCK Data transfer
			else if ( bBootLoadMode && VSCP_TYPE_PROTOCOL_START_BLOCK == pEvent->vscp_type ) {
					
				// Must be a valid block number
				if ( ( 0 != pEvent->data[ 16 ] ) ||
						( 0 != pEvent->data[ 17 ] ) || 
						( 0 != pEvent->data[ 18 ] ) ||
						( ( 247 + 2 ) < pEvent->data[ 19 ] )  ) {
					return;			
				}
				
				// Blockno for 64K device:
				// =======================
				//		0 - 0x0800
				//		1 -	0x0900 
				//		...
				//		247 - 0xff00
				//		248 - 0x0400
				//		249 - 0x0500
				vscp_current_bootblock = pEvent->data[ 19 ];	// Save block
				
				if ( vscp_current_bootblock < 248 ) {					
					eeprom_pos = 0x400 + ( vscp_current_bootblock - 248 ) * 0xff;
				}
				else {
					eeprom_pos = 0x800 + vscp_current_bootblock * 0xff;
				}
				return;
				
			}
			
			// Bootloader: Data block
			else if ( bBootLoadMode && VSCP_TYPE_PROTOCOL_BLOCK_DATA == pEvent->vscp_type ) {
				
				wrkEvent.head = VSCP_PRIORITY_NORMAL);
				wrkEvent.sizeData = 22;
				wrkEvent.vscp_class = VSCP_CLASS1_PROTOCOL;
				
				remainder = INITIAL_REMAINDER;
				XEEBeginRead( EEPROM_CONTROL, eeprom_pos );
    			for ( i = 0; i<( pEvent->sizeData - 16 ); i++ ) {
					crcSlow_bithandler( pEvent->data[ i + 16 ], &remainder );
					XEEWrite( pEvent->data[ i + 16 ] );
					eeprom_pos++;
				}
				
				wrkEvent.sizeData = 6;
				wrkEvent.head = VSCP_PRIORITY_HIGH;
				wrkEvent.vscp_class = VSCP_CLASS1_PROTOCOL;
				wrkEvent.vscp_type = VSCP_TYPE_PROTOCOL_BLOCK_DATA_ACK;
				
				wrkEvent.data[ 0 ] = (  getCRC( &remainder ) >> 8 ) & 0xff;
				wrkEvent.data[ 1 ] = getCRC( &remainder ) & 0xff;
				wrkEvent.data[ 2 ] = 0;
				wrkEvent.data[ 3 ] = 0;
				wrkEvent.data[ 4 ] = ( eeprom_pos >> 8 ) & 0xff;
				wrkEvent.data[ 5 ] = eeprom_pos & 0xff;
				
				vscp_sendEvent( &wrkEvent );
				return;
			}
			
			// Bootloader: Program data block
			else if ( bBootLoadMode && VSCP_TYPE_PROTOCOL_PROGRAM_BLOCK_DATA == pEvent->vscp_type ) {
			
				//  Does nothing here - we just ACK
				wrkEvent.sizeData = 4;
				wrkEvent.head = VSCP_PRIORITY_HIGH;
				wrkEvent.vscp_class = VSCP_CLASS1_PROTOCOL;
				wrkEvent.vscp_type = VSCP_TYPE_PROTOCOL_PROGRAM_BLOCK_DATA_ACK;
				
				wrkEvent.data[ 0 ] = 0;
				wrkEvent.data[ 1 ] = 0;
				wrkEvent.data[ 2 ] = ( eeprom_pos >> 8 ) & 0xff;
				wrkEvent.data[ 3 ] = eeprom_pos & 0xff;
				
				vscp_sendEvent( &wrkEvent );
				return;
					
			}
			
			// Bootloader: Activate the image
			else if ( bBootLoadMode && VSCP_TYPE_PROTOCOL_ACTIVATE_NEW_IMAGE == pEvent->vscp_type ) {
				
			}	   	    	
			
#endif	